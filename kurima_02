import React, { useState, useEffect, createContext, useContext } from 'react';
import { Tractor, MapPin, Phone, Calendar, DollarSign, Users, BarChart3, Settings, Plus, Clock, CheckCircle, AlertCircle, Loader2, X, Edit, UserCheck } from 'lucide-react';

// Global State Context
const AppContext = createContext();

// Mock API service (replace with real backend)
const API_BASE = '/api'; // Would be your actual backend URL

const apiService = {
  async fetchBookings() {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 800));
    return [
      {
        id: 1,
        farmer: 'John Mukamuri',
        location: 'Mutoko Ward 15',
        service: 'Tractor Ploughing',
        hectares: 2.5,
        date: '2025-07-02',
        status: 'confirmed',
        operator: 'Peter Chigwedere',
        price: 75,
        contact: '+263 77 123 4567'
      },
      {
        id: 2,
        farmer: 'Mary Chidzonga',
        location: 'Gutu Ward 8',
        service: 'Animal-drawn Ploughing',
        hectares: 1.2,
        date: '2025-07-03',
        status: 'pending',
        operator: null,
        price: 20,
        contact: '+263 71 987 6543'
      },
      {
        id: 3,
        farmer: 'Simon Mutasa',
        location: 'Murehwa Ward 12',
        service: 'Tractor Ploughing',
        hectares: 4.0,
        date: '2025-07-05',
        status: 'in_progress',
        operator: 'Grace Mazuru',
        price: 140,
        contact: '+263 78 456 7890'
      }
    ];
  },

  async fetchTractors() {
    await new Promise(resolve => setTimeout(resolve, 600));
    return [
      {
        id: 'T001',
        type: 'Massey Ferguson 135',
        location: 'Mutoko Hub',
        status: 'available',
        operator: 'Peter Chigwedere',
        lastService: '2025-06-15',
        hoursWorked: 245
      },
      {
        id: 'T002',
        type: 'John Deere 5055E',
        location: 'Gutu Hub',
        status: 'in_use',
        operator: 'Grace Mazuru',
        lastService: '2025-06-20',
        hoursWorked: 189
      },
      {
        id: 'AD01',
        type: 'Animal-drawn Plough Set',
        location: 'Murehwa Hub',
        status: 'available',
        operator: 'Thomas Nhongo',
        lastService: '2025-06-10',
        hoursWorked: 78
      }
    ];
  },

  async createBooking(bookingData) {
    await new Promise(resolve => setTimeout(resolve, 1000));
    return {
      id: Date.now(),
      ...bookingData,
      status: 'pending',
      operator: null
    };
  },

  async updateBookingStatus(id, status, operator = null) {
    await new Promise(resolve => setTimeout(resolve, 500));
    return { id, status, operator };
  },

  async sendSMS(phoneNumber, message) {
    await new Promise(resolve => setTimeout(resolve, 300));
    console.log(`SMS sent to ${phoneNumber}: ${message}`);
    return { success: true };
  }
};

// Utility functions
const calculatePrice = (service, hectares, urgency) => {
  const baseRates = {
    'Tractor Ploughing': 35,
    'Animal-drawn Ploughing': 18
  };
  const urgencyMultiplier = urgency === 'urgent' ? 1.3 : 1.0;
  return Math.round(baseRates[service] * hectares * urgencyMultiplier);
};

const validatePhoneNumber = (phone) => {
  const zimPhoneRegex = /^\+263\s?[7-9]\d\s?\d{3}\s?\d{4}$/;
  return zimPhoneRegex.test(phone);
};

const validateForm = (formData) => {
  const errors = {};
  
  if (!formData.farmer.trim()) errors.farmer = 'Farmer name is required';
  if (!formData.contact.trim()) errors.contact = 'Contact number is required';
  else if (!validatePhoneNumber(formData.contact)) errors.contact = 'Invalid Zimbabwe phone number format';
  if (!formData.location.trim()) errors.location = 'Location is required';
  if (!formData.hectares || formData.hectares <= 0) errors.hectares = 'Valid hectares required';
  if (!formData.date) errors.date = 'Date is required';
  
  return errors;
};

// Reusable Components
const StatusBadge = ({ status }) => {
  const colors = {
    pending: 'bg-yellow-100 text-yellow-800',
    confirmed: 'bg-blue-100 text-blue-800',
    in_progress: 'bg-green-100 text-green-800',
    completed: 'bg-gray-100 text-gray-800'
  };
  
  const icons = {
    pending: <Clock className="w-3 h-3" />,
    confirmed: <CheckCircle className="w-3 h-3" />,
    in_progress: <AlertCircle className="w-3 h-3" />,
    completed: <CheckCircle className="w-3 h-3" />
  };
  
  return (
    <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${colors[status]}`}>
      {icons[status]}
      {status.replace('_', ' ')}
    </span>
  );
};

const LoadingSpinner = ({ size = 'md' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8'
  };
  
  return (
    <Loader2 className={`${sizeClasses[size]} animate-spin`} />
  );
};

const ErrorMessage = ({ message, onRetry }) => (
  <div className="bg-red-50 border border-red-200 rounded-lg p-4">
    <div className="flex items-center justify-between">
      <div className="flex items-center gap-2">
        <AlertCircle className="w-5 h-5 text-red-600" />
        <span className="text-red-800">{message}</span>
      </div>
      {onRetry && (
        <button
          onClick={onRetry}
          className="text-red-600 hover:text-red-800 font-medium"
        >
          Retry
        </button>
      )}
    </div>
  </div>
);

const Modal = ({ isOpen, onClose, title, children }) => {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-4 border-b">
          <h3 className="text-lg font-semibold">{title}</h3>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        <div className="p-4">
          {children}
        </div>
      </div>
    </div>
  );
};

// Dashboard Component
const Dashboard = () => {
  const { bookings, tractors, loading } = useContext(AppContext);
  
  const stats = {
    totalBookings: bookings.length,
    completedJobs: bookings.filter(b => b.status === 'completed').length,
    activeOperators: [...new Set(tractors.map(t => t.operator))].length,
    totalRevenue: bookings.reduce((sum, b) => sum + b.price, 0),
    avgRating: 4.6
  };

  if (loading.dashboard) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Bookings</p>
              <p className="text-2xl font-bold text-gray-900">{stats.totalBookings}</p>
            </div>
            <Calendar className="h-8 w-8 text-blue-600" />
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Completed Jobs</p>
              <p className="text-2xl font-bold text-gray-900">{stats.completedJobs}</p>
            </div>
            <CheckCircle className="h-8 w-8 text-green-600" />
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Operators</p>
              <p className="text-2xl font-bold text-gray-900">{stats.activeOperators}</p>
            </div>
            <Users className="h-8 w-8 text-purple-600" />
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Revenue (USD)</p>
              <p className="text-2xl font-bold text-gray-900">${stats.totalRevenue}</p>
            </div>
            <DollarSign className="h-8 w-8 text-green-600" />
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Avg Rating</p>
              <p className="text-2xl font-bold text-gray-900">{stats.avgRating}</p>
            </div>
            <BarChart3 className="h-8 w-8 text-yellow-600" />
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <h3 className="text-lg font-semibold mb-4">Recent Bookings</h3>
          <div className="space-y-3">
            {bookings.slice(0, 5).map(booking => (
              <div key={booking.id} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                <div>
                  <p className="font-medium">{booking.farmer}</p>
                  <p className="text-sm text-gray-600">{booking.location}</p>
                </div>
                <StatusBadge status={booking.status} />
              </div>
            ))}
          </div>
        </div>
        
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <h3 className="text-lg font-semibold mb-4">Equipment Status</h3>
          <div className="space-y-3">
            {tractors.map(tractor => (
              <div key={tractor.id} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                <div>
                  <p className="font-medium">{tractor.id} - {tractor.type}</p>
                  <p className="text-sm text-gray-600">{tractor.location}</p>
                </div>
                <StatusBadge status={tractor.status === 'available' ? 'confirmed' : 'in_progress'} />
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

// Booking Form Component
const BookingForm = () => {
  const { createBooking, loading, error } = useContext(AppContext);
  const [formData, setFormData] = useState({
    farmer: '',
    contact: '',
    location: '',
    service: 'Tractor Ploughing',
    hectares: '',
    date: '',
    urgency: 'normal'
  });
  const [formErrors, setFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    const errors = validateForm(formData);
    setFormErrors(errors);
    
    if (Object.keys(errors).length > 0) return;
    
    setIsSubmitting(true);
    
    try {
      const price = calculatePrice(formData.service, parseFloat(formData.hectares), formData.urgency);
      const bookingData = {
        ...formData,
        hectares: parseFloat(formData.hectares),
        price
      };
      
      await createBooking(bookingData);
      
      // Send SMS confirmation
      await apiService.sendSMS(
        formData.contact,
        `Booking confirmed! ${formData.service} for ${formData.hectares}ha on ${formData.date}. Price: $${price}. Ref: ${Date.now()}`
      );
      
      // Reset form
      setFormData({
        farmer: '',
        contact: '',
        location: '',
        service: 'Tractor Ploughing',
        hectares: '',
        date: '',
        urgency: 'normal'
      });
      
      alert('Booking submitted successfully! SMS confirmation sent.');
    } catch (err) {
      console.error('Booking submission failed:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  const estimatedPrice = formData.hectares ? 
    calculatePrice(formData.service, parseFloat(formData.hectares) || 0, formData.urgency) : 0;

  return (
    <div className="bg-white p-6 rounded-lg shadow-sm border max-w-2xl">
      <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
        <Plus className="w-5 h-5" />
        New Booking Request
      </h3>
      
      {error.booking && (
        <ErrorMessage message={error.booking} />
      )}
      
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Farmer Name *
            </label>
            <input
              type="text"
              value={formData.farmer}
              onChange={(e) => setFormData({...formData, farmer: e.target.value})}
              className={`w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                formErrors.farmer ? 'border-red-500' : 'border-gray-300'
              }`}
              aria-invalid={formErrors.farmer ? 'true' : 'false'}
              aria-describedby={formErrors.farmer ? 'farmer-error' : undefined}
            />
            {formErrors.farmer && (
              <p id="farmer-error" className="text-red-600 text-sm mt-1">{formErrors.farmer}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Contact Number *
            </label>
            <input
              type="tel"
              value={formData.contact}
              onChange={(e) => setFormData({...formData, contact: e.target.value})}
              placeholder="+263 77 123 4567"
              className={`w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                formErrors.contact ? 'border-red-500' : 'border-gray-300'
              }`}
              aria-invalid={formErrors.contact ? 'true' : 'false'}
              aria-describedby={formErrors.contact ? 'contact-error' : undefined}
            />
            {formErrors.contact && (
              <p id="contact-error" className="text-red-600 text-sm mt-1">{formErrors.contact}</p>
            )}
          </div>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Location (Ward) *
          </label>
          <input
            type="text"
            value={formData.location}
            onChange={(e) => setFormData({...formData, location: e.target.value})}
            placeholder="e.g., Mutoko Ward 15"
            className={`w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              formErrors.location ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {formErrors.location && (
            <p className="text-red-600 text-sm mt-1">{formErrors.location}</p>
          )}
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Service Type</label>
            <select
              value={formData.service}
              onChange={(e) => setFormData({...formData, service: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="Tractor Ploughing">Tractor Ploughing</option>
              <option value="Animal-drawn Ploughing">Animal-drawn Ploughing</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Hectares *
            </label>
            <input
              type="number"
              step="0.1"
              min="0.1"
              value={formData.hectares}
              onChange={(e) => setFormData({...formData, hectares: e.target.value})}
              className={`w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                formErrors.hectares ? 'border-red-500' : 'border-gray-300'
              }`}
            />
            {formErrors.hectares && (
              <p className="text-red-600 text-sm mt-1">{formErrors.hectares}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Urgency</label>
            <select
              value={formData.urgency}
              onChange={(e) => setFormData({...formData, urgency: e.target.value})}
              className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="normal">Normal</option>
              <option value="urgent">Urgent (+30%)</option>
            </select>
          </div>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Preferred Date *
          </label>
          <input
            type="date"
            value={formData.date}
            onChange={(e) => setFormData({...formData, date: e.target.value})}
            min={new Date().toISOString().split('T')[0]}
            className={`w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
              formErrors.date ? 'border-red-500' : 'border-gray-300'
            }`}
          />
          {formErrors.date && (
            <p className="text-red-600 text-sm mt-1">{formErrors.date}</p>
          )}
        </div>
        
        {estimatedPrice > 0 && (
          <div className="bg-blue-50 p-3 rounded-lg">
            <p className="text-sm text-blue-800">
              Estimated Price: <span className="font-semibold">${estimatedPrice} USD</span>
            </p>
          </div>
        )}
        
        <button
          onClick={handleSubmit}
          disabled={isSubmitting}
          className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition duration-200 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
        >
          {isSubmitting && <LoadingSpinner size="sm" />}
          {isSubmitting ? 'Submitting...' : 'Submit Booking Request'}
        </button>
      </div>
    </div>
  );
};

// Booking Management Component
const ManageBookings = () => {
  const { bookings, updateBookingStatus, loading, error } = useContext(AppContext);
  const [editingBooking, setEditingBooking] = useState(null);
  const [assigningBooking, setAssigningBooking] = useState(null);

  const handleStatusUpdate = async (bookingId, newStatus, operator = null) => {
    try {
      await updateBookingStatus(bookingId, newStatus, operator);
      setEditingBooking(null);
      setAssigningBooking(null);
    } catch (err) {
      console.error('Failed to update booking:', err);
    }
  };

  if (loading.bookings) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Manage Bookings</h3>
        <div className="flex gap-2">
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200">
            Export Data
          </button>
        </div>
      </div>
      
      {error.bookings && (
        <ErrorMessage message={error.bookings} />
      )}
      
      <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Farmer</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Service</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {bookings.map((booking) => (
                <tr key={booking.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">{booking.farmer}</div>
                      <div className="text-sm text-gray-500">{booking.contact}</div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{booking.location}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{booking.service}</div>
                    <div className="text-sm text-gray-500">{booking.hectares} ha</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{booking.date}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <StatusBadge status={booking.status} />
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${booking.price}</td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button 
                      onClick={() => setEditingBooking(booking)}
                      className="text-blue-600 hover:text-blue-900 mr-3 flex items-center gap-1"
                    >
                      <Edit className="w-3 h-3" />
                      Edit
                    </button>
                    <button 
                      onClick={() => setAssigningBooking(booking)}
                      className="text-green-600 hover:text-green-900 flex items-center gap-1"
                    >
                      <UserCheck className="w-3 h-3" />
                      Assign
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Edit Modal */}
      <Modal
        isOpen={editingBooking !== null}
        onClose={() => setEditingBooking(null)}
        title="Edit Booking Status"
      >
        {editingBooking && (
          <div className="space-y-4">
            <div>
              <p className="font-medium">{editingBooking.farmer}</p>
              <p className="text-sm text-gray-600">{editingBooking.service} - {editingBooking.hectares}ha</p>
            </div>
            
            <div className="space-y-2">
              {['pending', 'confirmed', 'in_progress', 'completed'].map(status => (
                <button
                  key={status}
                  onClick={() => handleStatusUpdate(editingBooking.id, status)}
                  className={`w-full p-2 text-left rounded border hover:bg-gray-50 ${
                    editingBooking.status === status ? 'bg-blue-50 border-blue-200' : 'border-gray-200'
                  }`}
                >
                  <StatusBadge status={status} />
                </button>
              ))}
            </div>
          </div>
        )}
      </Modal>

      {/* Assign Modal */}
      <Modal
        isOpen={assigningBooking !== null}
        onClose={() => setAssigningBooking(null)}
        title="Assign Operator"
      >
        {assigningBooking && (
          <div className="space-y-4">
            <div>
              <p className="font-medium">{assigningBooking.farmer}</p>
              <p className="text-sm text-gray-600">{assigningBooking.service} - {assigningBooking.hectares}ha</p>
            </div>
            
            <div className="space-y-2">
              {['Peter Chigwedere', 'Grace Mazuru', 'Thomas Nhongo'].map(operator => (
                <button
                  key={operator}
                  onClick={() => handleStatusUpdate(assigningBooking.id, 'confirmed', operator)}
                  className="w-full p-2 text-left rounded border border-gray-200 hover:bg-gray-50"
                >
                  {operator}
                </button>
              ))}
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

// Fleet Management Component
const FleetManagement = () => {
  const { tractors, loading, error } = useContext(AppContext);

  if (loading.tractors) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Fleet Management</h3>
        <button className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-200">
          Add Equipment
        </button>
      </div>
      
      {error.tractors && (
        <ErrorMessage message={error.tractors} />
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {tractors.map((tractor) => (
          <div key={tractor.id} className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="flex items-center justify-between mb-4">
              <h4 className="text-lg font-semibold">{tractor.id}</h4>
              <StatusBadge status={tractor.status === 'available' ? 'confirmed' : 'in_progress'} />
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <Tractor className="w-4 h-4 text-gray-500" />
                <span className="text-sm">{tractor.type}</span>
              </div>
              
              <div className="flex items-center gap-2">
                <MapPin className="w-4 h-4 text-gray-500" />
                <span className="text-sm">{tractor.location}</span>
              </div>
              
              <div className="flex items-center gap-2">
                <Users className="w-4 h-4 text-gray-500" />
                <span className="text-sm">{tractor.operator}</span>
              </div>
              
              <div className="flex justify-between text-sm text-gray-600 mt-4">
                <span>Hours: {tractor.hoursWorked}</span>
                <span>Last Service: {tractor.lastService}</span>
              </div>
            </div>
            
            <div className="mt-4 flex gap-2">
              <button className="flex-1 px-3 py-2 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition duration-200 text-sm">
                Track GPS
              </button>
              <button className="flex-1 px-3 py-2 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition duration-200 text-sm">
                Service Log
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// App State Provider
const AppProvider = ({ children }) => {
  const [bookings, setBookings] = useState([]);
  const [tractors, setTractors] = useState([]);
  const [loading, setLoading] = useState({
    dashboard: false,
    bookings: false,
    tractors: false,
    booking: false
  });
  const [error, setError] = useState({
    dashboard: null,
    bookings: null,
    tractors: null,
    booking: null
  });

  // Load initial data
  useEffect(() => {
    const loadData = async () => {
      setLoading(prev => ({ ...prev, dashboard: true, bookings: true, tractors: true }));
      
      try {
        const [bookingsData, tractorsData] = await Promise.all([
          apiService.fetchBookings(),
          apiService.fetchTractors()
        ]);
        
        setBookings(bookingsData);
        setTractors(tractorsData);
        setError(prev => ({ ...prev, bookings: null, tractors: null }));
      } catch (err) {
        setError(prev => ({
          ...prev,
          bookings: 'Failed to load bookings',
          tractors: 'Failed to load equipment data'
        }));
      } finally {
        setLoading(prev => ({ ...prev, dashboard: false, bookings: false, tractors: false }));
      }
    };

    loadData();
  }, []);

  const createBooking = async (bookingData) => {
    setLoading(prev => ({ ...prev, booking: true }));
    setError(prev => ({ ...prev, booking: null }));
    
    try {
      const newBooking = await apiService.createBooking(bookingData);
      setBookings(prev => [...prev, newBooking]);
    } catch (err) {
      setError(prev => ({ ...prev, booking: 'Failed to create booking' }));
      throw err;
    } finally {
      setLoading(prev => ({ ...prev, booking: false }));
    }
  };

  const updateBookingStatus = async (id, status, operator = null) => {
    try {
      await apiService.updateBookingStatus(id, status, operator);
      setBookings(prev => prev.map(booking => 
        booking.id === id 
          ? { ...booking, status, operator: operator || booking.operator }
          : booking
      ));
    } catch (err) {
      throw err;
    }
  };

  const contextValue = {
    bookings,
    tractors,
    loading,
    error,
    createBooking,
    updateBookingStatus
  };

  return (
    <AppContext.Provider value={contextValue}>
      {children}
    </AppContext.Provider>
  );
};

// Main App Component
const TractorCoopPlatform = () => {
  const [activeTab, setActiveTab] = useState('dashboard');

  const tabs = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
    { id: 'booking', label: 'New Booking', icon: Plus },
    { id: 'manage', label: 'Manage Bookings', icon: Calendar },
    { id: 'fleet', label: 'Fleet', icon: Tractor },
  ];

  return (
    <AppProvider>
      <div className="min-h-screen bg-gray-100">
        {/* Header */}
        <div className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center">
                  <Tractor className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">Zimbabwe Tractor Co-op</h1>
                  <p className="text-sm text-gray-600">Last Mile Agricultural Services</p>
                </div>
              </div>
              
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2 text-sm text-gray-600">
                  <MapPin className="w-4 h-4" />
                  <span>Harare Operations Center</span>
                </div>
                
                <div className="flex items-center gap-2 text-sm">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-gray-600">System Online</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <nav className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex space-x-8">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center gap-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${
                      activeTab === tab.id
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <Icon className="w-4 h-4" />
                    {tab.label}
                  </button>
                );
              })}
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {activeTab === 'dashboard' && <Dashboard />}
          {activeTab === 'booking' && <BookingForm />}
          {activeTab === 'manage' && <ManageBookings />}
          {activeTab === 'fleet' && <FleetManagement />}
        </main>
        
        {/* Footer */}
        <footer className="bg-white border-t mt-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex flex-col md:flex-row justify-between items-center">
              <div className="text-sm text-gray-600">
                <p>Empowering smallholder farmers across Zimbabwe</p>
                <div className="flex items-center gap-4 mt-2">
                  <span className="flex items-center gap-1">
                    <Phone className="w-3 h-3" />
                    SMS: *123*456#
                  </span>
                  <span className="flex items-center gap-1">
                    <Phone className="w-3 h-3" />
                    Hotline: +263 4 123 4567
                  </span>
                  <span className="flex items-center gap-1">
                    <span className="w-3 h-3 text-green-600">💬</span>
                    WhatsApp: +263 77 000 0000
                  </span>
                </div>
              </div>
              
              <div className="flex items-center gap-4 mt-4 md:mt-0 text-sm">
                <span className="text-gray-600">Supported by:</span>
                <div className="flex gap-2">
                  <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">World Vision</span>
                  <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">GIZ</span>
                  <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs">Diaspora Fund</span>
                </div>
              </div>
            </div>
            
            <div className="border-t mt-4 pt-4 text-center text-xs text-gray-500">
              <p>© 2025 Zimbabwe Last Mile Tractor Co-op. Built for farmers, by the community.</p>
            </div>
          </div>
        </footer>
      </div>
    </AppProvider>
  );
};

export default TractorCoopPlatform;
